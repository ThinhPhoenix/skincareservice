@page "/services"
@using SkinCareBussinessObject
@using SkinCareRepository
@using Microsoft.AspNetCore.Components.Web
@inject IServiceRepository ServiceRepository
@inject IServiceCategoryRepository CategoryRepository
@inject NavigationManager NavigationManager

<PageTitle>Dịch Vụ | SkinCare Spa</PageTitle>

<div class="bg-white min-h-screen">
    <div class="container mx-auto py-10 px-4">
        <!-- Header -->
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-pink-600 mb-3">Dịch Vụ Của Chúng Tôi</h1>
            <p class="text-lg text-gray-600 max-w-3xl mx-auto">Khám phá các dịch vụ chăm sóc da cao cấp được thiết kế để giúp bạn tỏa sáng và tự tin mỗi ngày.</p>
        </div>

        <!-- Search & Filter -->
        <div class="mb-10 flex flex-col lg:flex-row justify-between items-stretch lg:items-center gap-4">
            <div class="w-full lg:w-1/3">
                <div class="relative">
                    <input type="text" 
                           placeholder="Tìm kiếm dịch vụ..." 
                           @bind="searchTerm" 
                           @bind:event="oninput" 
                           @onkeyup="HandleKeyUp"
                           class="w-full px-4 py-3 border-2 border-pink-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 pl-10" />
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-pink-400"></i>
                </div>
            </div>

            <div class="flex flex-col sm:flex-row gap-4">
                <div>
                    <select @bind="selectedCategory" class="px-4 py-3 border-2 border-pink-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-white w-full">
                        <option value="">Tất cả danh mục</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.CategoryName</option>
                        }
                    </select>
                </div>
                
                <div>
                    <select @bind="sortOption" class="px-4 py-3 border-2 border-pink-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-white w-full">
                        <option value="nameAsc">Tên A-Z</option>
                        <option value="nameDesc">Tên Z-A</option>
                        <option value="priceAsc">Giá thấp - cao</option>
                        <option value="priceDesc">Giá cao - thấp</option>
                    </select>
                </div>
                
                <button @onclick="ApplyFilters" class="px-5 py-3 bg-gradient-to-r from-pink-500 to-pink-600 hover:from-pink-600 hover:to-pink-700 text-white rounded-lg transition-all shadow-md font-medium flex items-center justify-center gap-2">
                    <i class="fas fa-sliders-h"></i> Áp dụng
                </button>
                
                <button @onclick="ResetFilters" class="px-5 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-all shadow-md font-medium flex items-center justify-center gap-2">
                    <i class="fas fa-sync-alt"></i> Làm mới
                </button>
            </div>
        </div>

        @if (loading)
        {
            <!-- Loading skeleton -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                @for (int i = 0; i < 8; i++)
                {
                    <div class="bg-white rounded-xl shadow-md overflow-hidden animate-pulse">
                        <div class="h-48 bg-gray-300"></div>
                        <div class="p-4">
                            <div class="h-6 bg-gray-300 rounded mb-3"></div>
                            <div class="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                            <div class="h-4 bg-gray-300 rounded w-1/2 mb-4"></div>
                            <div class="h-8 bg-gray-300 rounded"></div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (filteredServices == null || !filteredServices.Any())
        {
            <!-- Empty state -->
            <div class="text-center py-16 bg-pink-50 rounded-xl border-2 border-pink-100">
                <i class="fas fa-spa text-pink-300 text-5xl mb-4"></i>
                <h3 class="text-2xl font-semibold text-gray-700 mb-2">Không tìm thấy dịch vụ nào</h3>
                <p class="text-gray-600">Vui lòng thử tìm kiếm với từ khóa khác hoặc xem tất cả dịch vụ.</p>
                <button @onclick="ResetFilters" class="mt-4 px-6 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600 transition-all">
                    <i class="fas fa-sync-alt mr-2"></i>Hiển thị tất cả dịch vụ
                </button>
            </div>
        }
        else
        {
            <!-- Services grid -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                @foreach (var service in filteredServices)
                {
                    <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                        <div class="relative h-48 overflow-hidden">
                           
                                <div class="h-full w-full bg-gradient-to-br from-pink-100 to-pink-50 flex items-center justify-center">
                                    <i class="fas fa-spa text-pink-300 text-5xl"></i>
                                </div>
                          
                            <div class="absolute top-0 right-0 m-2 px-3 py-1 bg-gradient-to-r from-pink-500 to-pink-600 text-white text-sm font-semibold rounded-full shadow-md">
                                @FormatPrice(service.Price)
                            </div>
                        </div>
                        <div class="p-5">
                            <h3 class="text-lg font-semibold text-gray-800 mb-2 line-clamp-2">@service.ServiceName</h3>
                            <p class="text-gray-600 text-sm mb-4 line-clamp-3">@service.Description</p>
                            <div class="flex justify-between items-center">
                                <span class="text-xs bg-pink-100 text-pink-800 px-2 py-1 rounded-full font-medium">
                                    @(service.DurationMinutes > 0 ? $"{service.DurationMinutes} phút" : "Linh hoạt")
                                </span>
                                <button @onclick="() => ViewServiceDetails(service.Id)" 
                                        class="bg-gradient-to-r from-pink-500 to-pink-600 hover:from-pink-600 hover:to-pink-700 text-white px-4 py-2 rounded-lg transition-all text-sm flex items-center">
                                    <i class="fas fa-info-circle mr-1"></i> Chi tiết
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Service> services = new List<Service>();
    private List<Service> filteredServices = new List<Service>();
    private List<ServiceCategory> categories = new List<ServiceCategory>();
    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortOption = "nameAsc";
    private bool loading = true;
    private System.Threading.Timer searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Get all services
            services = ServiceRepository.GetAll().Where(s => s.IsActive).ToList();

            // Get all categories
            categories = CategoryRepository.GetAll().ToList();

            // Link services to categories
            foreach (var service in services)
            {
                if (!string.IsNullOrEmpty(service.CategoryId) && service.ServiceCategory == null)
                {
                    service.ServiceCategory = categories.FirstOrDefault(c => c.Id == service.CategoryId);
                }
            }

            
            filteredServices = services;

            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void HandleKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            ApplyFilters();
        }
        
        // Debounce search
        searchTimer?.Dispose();
        searchTimer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                if (searchTerm.Length >= 2 || string.IsNullOrEmpty(searchTerm))
                {
                    ApplyFilters();
                    StateHasChanged();
                }
            });
        }, null, 500, Timeout.Infinite);
    }

    private void ApplyFilters()
    {
        // Filter by search term and category
        filteredServices = services.Where(s =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             s.ServiceName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             s.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(selectedCategory) ||
             s.CategoryId == selectedCategory)
        ).ToList();

        // Apply sorting
        switch (sortOption)
        {
            case "nameAsc":
                filteredServices = filteredServices.OrderBy(s => s.ServiceName).ToList();
                break;
            case "nameDesc":
                filteredServices = filteredServices.OrderByDescending(s => s.ServiceName).ToList();
                break;
            case "priceAsc":
                filteredServices = filteredServices.OrderBy(s => s.Price).ToList();
                break;
            case "priceDesc":
                filteredServices = filteredServices.OrderByDescending(s => s.Price).ToList();
                break;
        }

        StateHasChanged();
    }

    private void ResetFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        sortOption = "nameAsc";
        ApplyFilters();
    }

    private void ViewServiceDetails(string id)
    {
        NavigationManager.NavigateTo($"/services/{id}");
    }

    private string FormatPrice(decimal price)
    {
        return price.ToString("N0") + "đ";
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}