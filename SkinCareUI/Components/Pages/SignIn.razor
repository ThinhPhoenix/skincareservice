@page "/signin"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using SkinCareUI.Services
@using Microsoft.AspNetCore.Http.Extensions
@using System.Web
@inject AuthService AuthService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using SkinCareRepository
@inject IUserRepository UserRepository;
@inject IHttpContextAccessor HttpContextAccessor
@using SkinCareDAO.Utils
<section>
    <div class="flex bg-white items-center justify-center px-4 py-10 sm:px-6 sm:py-16 lg:px-8 lg:py-8">
        <div class="xl:mx-auto xl:w-full shadow-md p-4 xl:max-w-sm 2xl:max-w-md">
            <div class="mb-2 flex justify-center"></div>
            <h2 class="text-center text-2xl font-bold leading-tight text-black">
                Sign in to your account
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Don't have an account? <a href="/signup" class="text-blue-500 hover:text-blue-700">Create a free account</a>
            </p>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mt-2 text-center text-red-600 bg-red-50 p-2 rounded-md border border-red-200">
                    @errorMessage
                </div>
            }

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="mt-8" name="SignInForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-600 mb-3" />

                <div class="space-y-5">
                    <div>
                        <label class="text-base font-medium text-gray-900">
                            Email address
                        </label>
                        <div class="mt-2">
                            <InputText placeholder="Email"
                            type="email"
                            @bind-Value="loginModel.Email"
                            class="flex h-10 w-full rounded-md border border-gray-300 bg-transparent px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-red-600 text-sm" />
                        </div>
                    </div>
                    <div>
                        <div class="flex items-center justify-between">
                            <label class="text-base font-medium text-gray-900">
                                Password
                            </label>
                            <a class="text-sm font-semibold text-black hover:underline"
                            title="Reset password"
                            href="#">
                                Forgot password?
                            </a>
                        </div>
                        <div class="mt-2">
                            <InputText placeholder="Password"
                            type="password"
                            @bind-Value="loginModel.Password"
                            class="flex h-10 w-full rounded-md border border-gray-300 bg-transparent px-3 py-2 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-red-600 text-sm" />
                        </div>
                    </div>
                    <div>
                        <button class="inline-flex w-full items-center justify-center rounded-md bg-pink-500 px-3.5 py-2.5 font-semibold leading-7 text-white hover:bg-pink-600"
                        type="submit">
                            Sign in
                        </button>
                    </div>
                </div>
            </EditForm>
            <div class="mt-3 space-y-3">
                <button class="relative inline-flex w-full items-center justify-center rounded-md border border-gray-400 bg-white px-3.5 py-2.5 font-semibold text-gray-700 transition-all duration-200 hover:bg-gray-100 hover:text-black focus:bg-gray-100 focus:text-black focus:outline-none"
                type="button"
                @onclick="SignInWithGoogle">
                    <span class="mr-2 inline-block">
                        <svg fill="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6 text-rose-500">
                            <path d="M20.283 10.356h-8.327v3.451h4.792c-.446 2.193-2.313 3.453-4.792 3.453a5.27 5.27 0 0 1-5.279-5.28 5.27 5.27 0 0 1 5.279-5.279c1.259 0 2.397.447 3.29 1.178l2.6-2.599c-1.584-1.381-3.615-2.233-5.89-2.233a8.908 8.908 0 0 0-8.934 8.934 8.907 8.907 0 0 0 8.934 8.934c4.467 0 8.529-3.249 8.529-8.934 0-.528-.081-1.097-.202-1.625z"></path>
                        </svg>
                    </span>
                    Sign in with Google
                </button>
            </div>
        </div>
    </div>
</section>

@code {
    private LoginViewModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            // Get admin credentials
            var adminEmail = Configuration["AdminAccount:Email"];
            var adminPassword = Configuration["AdminAccount:Password"];

            // Build query parameters for auth
            var authData = new Dictionary<string, string>();
            string redirectUrl;

            // Check admin login
            if (loginModel.Email == adminEmail && loginModel.Password == adminPassword)
            {
                authData.Add("email", loginModel.Email);
                authData.Add("isAdmin", "true");

                // Set admin redirect URL
                redirectUrl = "/systemaccounts"; // Or whatever admin landing page you want
            }
            else
            {
                string pass = MyUtils.Encrypt(loginModel.Password);
                // Check regular user login
                var account = UserRepository.SignIn(loginModel.Email, loginModel.Password);
                
                // Check if account exists
                if (account == null)
                {
                    errorMessage = "Email hoặc mật khẩu không đúng";
                    return;
                }
                
                // Check if account is active
                if (account.Status != "Active" && account.Status != "active")
                {
                    errorMessage = "Tài khoản của bạn đã bị vô hiệu hóa. Vui lòng liên hệ quản trị viên.";
                    return;
                }

                // Add auth info
                authData.Add("email", account.Email);
                authData.Add("role", account.Role);
                authData.Add("accountId", account.Id);

                // Determine redirect URL based on role
                switch (account.Role?.ToLower())
                {
                    case "customer":
                        redirectUrl = "/"; // Customer landing page
                        break;
                    case "staff":
                        redirectUrl = "/staff/users"; // Staff dashboard
                        break;
                    case "therapist":
                        redirectUrl = "/"; // Therapist dashboard
                        break;
                    default:
                        redirectUrl = "/unauthorized";
                        break;
                }
            }

            // Store auth data in localStorage
            foreach (var item in authData)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", item.Key, item.Value);
            }

            // Navigate to the landing page
            NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Đăng nhập thất bại: {ex.Message}";
        }
    }

    public class LoginViewModel
    {
        [Required(ErrorMessage = "Email là bắt buộc")]
        [EmailAddress(ErrorMessage = "Định dạng email không hợp lệ")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Mật khẩu là bắt buộc")]
        public string Password { get; set; } = string.Empty;
    }
    
    private void SignInWithGoogle()
    {
        // Implement Google OAuth sign-in logic here
        errorMessage = "Đăng nhập bằng Google chưa được triển khai";
    }
}