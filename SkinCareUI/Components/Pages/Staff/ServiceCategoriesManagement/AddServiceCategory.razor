@page "/staff/servicecategories/add"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject IServiceCategoryRepository ServiceCategoryRepository
@inject NavigationManager NavigationManager

<h3 class="text-3xl font-bold text-center text-gray-800 mb-6">Add New Service Category</h3>

@if (errorMessage != null)
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative text-center mb-4">
        @errorMessage
    </div>
}

<div class="max-w-xl mx-auto bg-white p-8 rounded-xl shadow-lg space-y-6">
    <div>
        <label class="block text-sm font-semibold text-gray-700">Category Name</label>
        <input type="text" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="newCategory.CategoryName" />
    </div>

    <div>
        <label class="block text-sm font-semibold text-gray-700">Description</label>
        <textarea class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2 resize-none h-24" @bind="newCategory.Description"></textarea>
    </div>

    <div class="flex justify-end space-x-3">
        <button class="bg-gray-500 text-white px-5 py-2 rounded-lg shadow-md hover:bg-gray-600 transition text-sm font-medium" @onclick="Cancel">Cancel</button>
        <button class="bg-primary text-white px-5 py-2 rounded-lg shadow-md hover:bg-primary/80 transition text-sm font-medium" @onclick="SaveCategory">Save</button>
    </div>
</div>

@code {
    private ServiceCategory newCategory = new ServiceCategory();
    private string errorMessage;

    protected override void OnInitialized()
    {
        try
        {
            // Initialize new category with default values
            newCategory = new ServiceCategory
            {
                Id = null,
                CategoryName = "",
                Description = ""
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing category: {ex.Message}";
        }
    }

    private void SaveCategory()
    {
        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(newCategory.CategoryName))
            {
                errorMessage = "Category Name cannot be empty";
                return;
            }

            // Create a new ServiceCategory object
            ServiceCategory categoryToAdd = new ServiceCategory
            {
                CategoryName = newCategory.CategoryName.Trim(),
                Description = newCategory.Description?.Trim() ?? string.Empty
            };

            // Generate a new GUID for the Id
            categoryToAdd.Id = Guid.NewGuid().ToString();

            // Save the new category
            ServiceCategoryRepository.Add(categoryToAdd);
            NavigationManager.NavigateTo("/staff/servicecategories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving category: {ex.Message}";

            if (ex.InnerException != null)
            {
                errorMessage += $" - Inner Exception: {ex.InnerException.Message}";

                // Debug additional details
                Console.WriteLine($"Error Details: {ex}");
                Console.WriteLine($"Inner Exception Details: {ex.InnerException}");
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/staff/servicecategories");
    }
}