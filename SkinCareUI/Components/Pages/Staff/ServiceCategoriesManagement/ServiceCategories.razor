@page "/staff/servicecategories"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject IServiceCategoryRepository ServiceCategoryRepository
@inject NavigationManager NavigationManager

<h3>Service Categories Management</h3>

@if (serviceCategories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Category Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in serviceCategories)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.CategoryName</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditCategory(category.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCategory(category.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-success" @onclick="AddCategory">Add New Category</button>

@code {
    private List<ServiceCategory> serviceCategories;

    protected override async Task OnInitializedAsync()
    {
        serviceCategories = ServiceCategoryRepository.GetAll();
    }

    private void AddCategory()
    {
        // Navigate to the AddServiceCategory page
        NavigationManager.NavigateTo("/staff/servicecategories/add");
    }

    private void EditCategory(string id)
    {
        // Navigate to the EditServiceCategory page with the category ID
        NavigationManager.NavigateTo($"/staff/servicecategories/edit/{id}");
    }

    private void DeleteCategory(string id)
    {
        // Logic to delete a category
        ServiceCategoryRepository.Delete(id);
        serviceCategories = ServiceCategoryRepository.GetAll();
    }
}