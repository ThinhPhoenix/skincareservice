@page "/staff/therapist"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject ITherapistRepository TherapistRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Quản Lý Chuyên Viên | SkinCare Spa</PageTitle>

<div class="">
    <div class="container mx-auto px-4">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-pink-600">Quản Lý Chuyên Viên</h1>
            <a href="/staff/therapist/create" class="bg-pink-500 text-white px-4 py-2 rounded-lg hover:bg-pink-600 transition flex items-center">
                <i class="fas fa-plus mr-2"></i> Thêm Chuyên Viên Mới
            </a>
        </div>
        
        <div class="rounded-xl shadow-md overflow-hidden mb-6">
            <div class="p-4 border-b border-gray-200 bg-gray-50 flex flex-wrap justify-between items-center">
                <h3 class="text-lg font-semibold text-gray-700 mb-2 md:mb-0">
                    <i class="fas fa-user-md mr-2"></i> Danh Sách Chuyên Viên
                </h3>
                
                <div class="flex gap-2 flex-wrap">
                    <div class="relative">
                        <input 
                            type="text" 
                            placeholder="Tìm kiếm..." 
                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500"
                        />
                        <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                            <i class="fas fa-search"></i>
                        </div>
                    </div>
                    
                    <select class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-pink-500">
                        <option value="">Tất cả trạng thái</option>
                        <option value="true">Có mặt</option>
                        <option value="false">Không có mặt</option>
                    </select>
                </div>
            </div>
            
            @if (isLoading)
            {
                <div class="flex justify-center my-12">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-pink-500"></div>
                </div>
            }
            else if (therapists == null || !therapists.Any())
            {
                <div class="p-8 text-center">
                    <div class="bg-blue-50 p-4 rounded-full inline-block mb-4">
                        <i class="fas fa-user-md text-blue-500 text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">Chưa có chuyên viên</h3>
                    <p class="text-gray-600 mb-6">Không có dữ liệu chuyên viên nào trong hệ thống.</p>
                    <a href="/staff/therapist/create" class="px-6 py-3 bg-pink-500 text-white rounded-lg shadow hover:bg-pink-600 transition inline-flex items-center">
                        <i class="fas fa-plus mr-2"></i> Thêm Chuyên Viên Mới
                    </a>
                </div>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Mã
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Chuyên Viên
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Giờ Làm Việc
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Chuyên Môn
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Trạng Thái
                                </th>
                                <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Thao Tác
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var therapist in therapists)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-mono text-gray-900">@FormatTherapistId(therapist.Id)</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="h-10 w-10 rounded-full overflow-hidden bg-gray-100 flex-shrink-0">
                                                <img src="@GetImageUrl(therapist)" class="h-full w-full object-cover" alt="@($"{therapist.FirstName} {therapist.LastName}")">
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900">@($"{therapist.FirstName} {therapist.LastName}")</div>
                                                <div class="text-sm text-gray-500">@(therapist.HireDate.Year) (Năm bắt đầu)</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-900">@therapist.WorkStartTime.ToString(@"hh\:mm") - @therapist.WorkEndTime.ToString(@"hh\:mm")</div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900 max-w-xs truncate">@therapist.Expertise</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="@(therapist.IsAvailable ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800") px-3 py-1 rounded-full text-xs font-medium">
                                            @(therapist.IsAvailable ? "Có mặt" : "Không có mặt")
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-center">
                                        <div class="flex justify-center space-x-3">
                                            <a href="/staff/therapist/@therapist.Id" class="text-blue-600 hover:text-blue-900 p-2 rounded hover:bg-blue-50 inline-block">
                                                <i class="fas fa-eye">View Detail</i>
                                            </a>
                                            <a href="/staff/therapist/edit/@therapist.Id" class="text-green-600 hover:text-green-900 p-2 rounded hover:bg-green-50 inline-block">
                                                <i class="fas fa-edit">Edit</i>
                                            </a>
                                            <button @onclick="() => ConfirmDelete(therapist)" class="text-red-600 hover:text-red-900 p-2 rounded hover:bg-red-50 inline-block">
                                                <i class="fas fa-trash">Delete</i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        
        <div class="mt-4 flex justify-center">
            <nav class="inline-flex rounded-md shadow">
                <a href="#" class="px-4 py-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                    Trước
                </a>
                <a href="#" class="px-4 py-2 bg-pink-500 text-white border border-pink-500">
                    1
                </a>
                <a href="#" class="px-4 py-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                    2
                </a>
                <a href="#" class="px-4 py-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                    3
                </a>
                <a href="#" class="px-4 py-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                    Sau
                </a>
            </nav>
        </div>
    </div>
</div>

@code {
    private List<Therapist> therapists = new List<Therapist>();
    private bool isLoading = true;
    private string searchTerm = "";
    private string statusFilter = "";
    
    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        try
        {
            isLoading = true;
            // Sử dụng Task.Result để chuyển từ bất đồng bộ sang đồng bộ
            therapists = TherapistRepository.GetAllAsync().Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading therapists: {ex.Message}");
            // Fallback to mock data if there's an error
            InitializeMockData();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeMockData()
    {
        therapists = new List<Therapist>
        {
            new Therapist
            {
                Id = Guid.NewGuid().ToString(),
                UserId = "user1",
                FirstName = "Hương",
                LastName = "Nguyễn",
                Bio = "Chuyên gia trong điều trị mụn và trẻ hóa da với hơn 8 năm kinh nghiệm.",
                Expertise = "Điều trị mụn, Trẻ hóa da",
                HireDate = DateTime.Now.AddYears(-8),
                IsAvailable = true,
                ProfileImage = "https://images.unsplash.com/photo-1559839734-2b71ea197ec2",
                WorkStartTime = new TimeSpan(9, 0, 0),
                WorkEndTime = new TimeSpan(17, 0, 0)
            },
            new Therapist
            {
                Id = Guid.NewGuid().ToString(),
                UserId = "user2",
                FirstName = "Minh",
                LastName = "Trần",
                Bio = "Chuyên gia chăm sóc da với 5 năm kinh nghiệm trong lĩnh vực trị liệu spa.",
                Expertise = "Chăm sóc da, Massage trị liệu",
                HireDate = DateTime.Now.AddYears(-5),
                IsAvailable = false,
                ProfileImage = "",
                WorkStartTime = new TimeSpan(10, 0, 0),
                WorkEndTime = new TimeSpan(18, 0, 0)
            }
        };
    }

    // Phương thức xử lý URL hình ảnh
    private string GetImageUrl(Therapist therapist)
    {
        if (therapist == null || string.IsNullOrEmpty(therapist.ProfileImage))
        {
            // URL mặc định nếu không có hình
            return "https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80";
        }
        
        string url = therapist.ProfileImage;
        
        // Nếu URL không chứa http hoặc https, thêm https://
        if (!url.StartsWith("http://") && !url.StartsWith("https://"))
        {
            url = "https://" + url;
        }
        
        return url;
    }
    
    // Phương thức định dạng ID an toàn
    private string FormatTherapistId(string id)
    {
        if (string.IsNullOrEmpty(id))
            return "N/A";
            
        // Nếu ID quá dài, hiển thị 8 ký tự đầu + dấu chấm ba
        if (id.Length > 8)
            return id.Substring(0, 8) + "...";
            
        // Nếu ID ngắn, hiển thị toàn bộ
        return id;
    }
    
    private async Task ConfirmDelete(Therapist therapist)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xóa chuyên viên {therapist.FirstName} {therapist.LastName}?");
        
        if (confirmed)
        {
            await DeleteTherapist(therapist.Id);
        }
    }
    
    private async Task DeleteTherapist(string id)
    {
        try
        {
            // Thực hiện xóa therapist
            // await TherapistRepository.DeleteAsync(id);
            
            // Tạm thời chỉ xóa trong danh sách UI
            therapists.RemoveAll(t => t.Id == id);
            await JSRuntime.InvokeVoidAsync("alert", "Đã xóa chuyên viên thành công!");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi xóa chuyên viên: {ex.Message}");
        }
    }
}