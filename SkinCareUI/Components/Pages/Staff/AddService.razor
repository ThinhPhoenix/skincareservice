@page "/staff/services/add"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject IServiceRepository ServiceRepository
@inject IServiceCategoryRepository CategoryRepository
@inject NavigationManager NavigationManager

<h3 class="text-3xl font-bold text-center text-gray-800 mb-6">Add New Service</h3>

@if (errorMessage != null)
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative text-center mb-4">
        @errorMessage
    </div>
}

<div class="max-w-xl mx-auto bg-white p-8 rounded-xl shadow-lg space-y-6">
    <div>
        <label class="block text-sm font-semibold text-gray-700">Service Name</label>
        <input type="text" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="newService.ServiceName" />
    </div>

    <div>
        <label class="block text-sm font-semibold text-gray-700">Category</label>
        <select class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="newService.CategoryId">
            <option value="">Select a category</option>
            @foreach (var category in categoryList)
            {
                <option value="@category.Id">@category.CategoryName</option>
            }
        </select>
    </div>

    <div>
        <label class="block text-sm font-semibold text-gray-700">Description</label>
        <textarea class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2 resize-none h-24" @bind="newService.Description"></textarea>
    </div>

    <div class="grid grid-cols-2 gap-4">
        <div>
            <label class="block text-sm font-semibold text-gray-700">Price ($)</label>
            <input type="number" step="0.01" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="newService.Price" />
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700">Duration (min)</label>
            <input type="number" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="newService.DurationMinutes" />
        </div>
    </div>

    <div>
        <label class="flex items-center space-x-3">
            <input type="checkbox" class="rounded border-gray-300 text-primary focus:ring-primary h-5 w-5" @bind="newService.IsActive" />
            <span class="text-sm text-gray-700">Active</span>
        </label>
    </div>

    <div class="flex justify-end space-x-3">
        <button class="bg-gray-500 text-white px-5 py-2 rounded-lg shadow-md hover:bg-gray-600 transition text-sm font-medium" @onclick="Cancel">Cancel</button>
        <button class="bg-primary text-white px-5 py-2 rounded-lg shadow-md hover:bg-primary/80 transition text-sm font-medium" @onclick="SaveService">Save</button>
    </div>
</div>

@code {
    private Service newService = new Service();
    private List<ServiceCategory> categoryList;
    private string errorMessage;

    protected override void OnInitialized()
    {
        try
        {
            // Khởi tạo dịch vụ mới với giá trị mặc định
            newService = new Service
            {
                Id = null,
                ServiceName = "",
                Description = "",
                Price = 0, // Giá trị mặc định
                DurationMinutes = 0, // Giá trị mặc định
                IsActive = true, // Mặc định là active
                CategoryId = "",
                ServiceCategory = null
            };
            
            // Lấy danh sách danh mục
            categoryList = CategoryRepository.GetAll();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private void SaveService()
    {
        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(newService.ServiceName))
            {
                errorMessage = "Tên dịch vụ không được để trống";
                return;
            }

            if (string.IsNullOrWhiteSpace(newService.CategoryId))
            {
                errorMessage = "Vui lòng chọn danh mục";
                return;
            }

            if (newService.Price <= 0)
            {
                errorMessage = "Giá dịch vụ phải lớn hơn 0";
                return;
            }

            if (newService.DurationMinutes <= 0)
            {
                errorMessage = "Thời gian dịch vụ phải lớn hơn 0 phút";
                return;
            }

            // Tạo mới một đối tượng Service, thay vì sử dụng đối tượng ràng buộc dữ liệu
            Service serviceToAdd = new Service
            {
                ServiceName = newService.ServiceName.Trim(),
                Description = newService.Description?.Trim() ?? string.Empty,
                Price = newService.Price,
                DurationMinutes = newService.DurationMinutes,
                IsActive = newService.IsActive,
                CategoryId = newService.CategoryId.Trim(),
                Prerequisites = newService.Prerequisites?.Trim() ?? string.Empty,
                Aftercare = newService.Aftercare?.Trim() ?? string.Empty
            };

            // Debug thông tin
            Console.WriteLine($"Debug - Adding service with CategoryId: {serviceToAdd.CategoryId}");
            
            // Save
            ServiceRepository.Add(serviceToAdd);
            NavigationManager.NavigateTo("/staff/services");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving service: {ex.Message}";
            
            if (ex.InnerException != null)
            {
                errorMessage += $" - Inner Exception: {ex.InnerException.Message}";
                
                // Debug thêm thông tin chi tiết
                Console.WriteLine($"Error Details: {ex}");
                Console.WriteLine($"Inner Exception Details: {ex.InnerException}");
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/staff/services");
    }
}