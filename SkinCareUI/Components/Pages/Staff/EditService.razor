@page "/staff/services/edit/{Id}"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject IServiceRepository ServiceRepository
@inject IServiceCategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="text-3xl font-bold text-center text-gray-800 mb-6">Edit Service</h3>

@if (errorMessage != null)
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative text-center mb-4">
        @errorMessage
    </div>
}

@if (isLoading)
{
    <div class="text-center">
        <p><em>Loading...</em></p>
    </div>
}
else if (service == null)
{
    <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded-lg relative text-center mb-4">
        Không tìm thấy dịch vụ với ID: @Id
    </div>
    <div class="flex justify-center">
        <button class="bg-gray-500 text-white px-5 py-2 rounded-lg shadow-md hover:bg-gray-600 transition text-sm font-medium" @onclick="GoBack">
            Quay lại
        </button>
    </div>
}
else
{
    <div class="max-w-xl mx-auto bg-white p-8 rounded-xl shadow-lg space-y-6">
        <div>
            <label class="block text-sm font-semibold text-gray-700">Service Name</label>
            <input type="text" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="service.ServiceName" />
        </div>

        <div>
            <label class="block text-sm font-semibold text-gray-700">Category</label>
            <select class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="service.CategoryId">
                <option value="">Select a category</option>
                @foreach (var category in categoryList)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </select>
        </div>

        <div>
            <label class="block text-sm font-semibold text-gray-700">Description</label>
            <textarea class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2 resize-none h-24" @bind="service.Description"></textarea>
        </div>

        <div class="grid grid-cols-2 gap-4">
            <div>
                <label class="block text-sm font-semibold text-gray-700">Price ($)</label>
                <input type="number" step="0.01" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="service.Price" />
            </div>
            <div>
                <label class="block text-sm font-semibold text-gray-700">Duration (min)</label>
                <input type="number" class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2" @bind="service.DurationMinutes" />
            </div>
        </div>

        <div>
            <label class="block text-sm font-semibold text-gray-700">Prerequisites</label>
            <textarea class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2 resize-none h-16" @bind="service.Prerequisites"></textarea>
        </div>

        <div>
            <label class="block text-sm font-semibold text-gray-700">Aftercare</label>
            <textarea class="mt-1 w-full rounded-lg border-gray-300 shadow-sm focus:ring-primary focus:border-primary px-3 py-2 resize-none h-16" @bind="service.Aftercare"></textarea>
        </div>

        <div>
            <label class="flex items-center space-x-3">
                <input type="checkbox" class="rounded border-gray-300 text-primary focus:ring-primary h-5 w-5" @bind="service.IsActive" />
                <span class="text-sm text-gray-700">Active</span>
            </label>
        </div>

        <div class="flex justify-end space-x-3">
            <button class="bg-gray-500 text-white px-5 py-2 rounded-lg shadow-md hover:bg-gray-600 transition text-sm font-medium" @onclick="Cancel">Cancel</button>
            <button class="bg-primary text-white px-5 py-2 rounded-lg shadow-md hover:bg-primary/80 transition text-sm font-medium" @onclick="() => UpdateService()">Save Changes</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Service service;
    private List<ServiceCategory> categoryList;
    private string errorMessage;
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        try
        {
            Console.WriteLine($"EditService.LoadData - Start loading data for id: {Id}");
            
            // Load categories
            categoryList = CategoryRepository.GetAll();
            Console.WriteLine($"EditService.LoadData - Loaded {categoryList?.Count ?? 0} categories");

            // Load service
            if (!string.IsNullOrEmpty(Id))
            {
                service = ServiceRepository.GetOne(Id);
                Console.WriteLine($"EditService.LoadData - Service loaded: {(service != null ? "Yes" : "No")}");
                
                if (service != null)
                {
                    Console.WriteLine($"EditService.LoadData - Service data: Name={service.ServiceName}, Price={service.Price}, CategoryId={service.CategoryId}");
                    
                    // If service is found but category is not loaded
                    if (service.CategoryId != null && service.ServiceCategory == null)
                    {
                        var category = CategoryRepository.GetOne(service.CategoryId);
                        service.ServiceCategory = category;
                        Console.WriteLine($"EditService.LoadData - Category loaded: {(category != null ? category.CategoryName : "Not Found")}");
                    }
                }
                else
                {
                    Console.WriteLine($"EditService.LoadData - WARNING: Service with ID {Id} not found");
                }
            }
            else
            {
                Console.WriteLine($"EditService.LoadData - WARNING: No ID provided");
            }
            
            isLoading = false;
            Console.WriteLine("EditService.LoadData - Completed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EditService.LoadData - ERROR: {ex.Message}");
            errorMessage = $"Error loading data: {ex.Message}";
            isLoading = false;
        }
    }

    private async Task UpdateService()
    {
        Console.WriteLine("EditService.UpdateService - Starting update process");
        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(service.ServiceName))
            {
                errorMessage = "Tên dịch vụ không được để trống";
                Console.WriteLine("EditService.UpdateService - Validation failed: Empty service name");
                return;
            }

            if (string.IsNullOrWhiteSpace(service.CategoryId))
            {
                errorMessage = "Vui lòng chọn danh mục";
                Console.WriteLine("EditService.UpdateService - Validation failed: No category selected");
                return;
            }

            if (service.Price <= 0)
            {
                errorMessage = "Giá dịch vụ phải lớn hơn 0";
                Console.WriteLine("EditService.UpdateService - Validation failed: Invalid price");
                return;
            }

            if (service.DurationMinutes <= 0)
            {
                errorMessage = "Thời gian dịch vụ phải lớn hơn 0 phút";
                Console.WriteLine("EditService.UpdateService - Validation failed: Invalid duration");
                return;
            }

            // Xác nhận trước khi cập nhật
            var confirmUpdate = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn cập nhật dịch vụ này?");
            if (!confirmUpdate)
            {
                Console.WriteLine("EditService.UpdateService - Update cancelled by user");
                return;
            }

            // Tạo bản sao của service để tránh vấn đề tham chiếu
            Service serviceToUpdate = new Service
            {
                Id = service.Id,
                ServiceName = service.ServiceName.Trim(),
                Description = service.Description?.Trim() ?? string.Empty,
                CategoryId = service.CategoryId.Trim(),
                Price = service.Price,
                DurationMinutes = service.DurationMinutes,
                IsActive = service.IsActive,
                Prerequisites = service.Prerequisites?.Trim() ?? string.Empty,
                Aftercare = service.Aftercare?.Trim() ?? string.Empty,
                ServiceCategory = null // Luôn đặt ServiceCategory là null
            };
            
            // In ra dữ liệu sẽ được cập nhật
            Console.WriteLine($"EditService.UpdateService - Data to update: ID={serviceToUpdate.Id}, Name={serviceToUpdate.ServiceName}, Price={serviceToUpdate.Price}, CategoryId={serviceToUpdate.CategoryId}");
            
            // Update
            Console.WriteLine("EditService.UpdateService - Calling repository update");
            ServiceRepository.Update(serviceToUpdate);
            Console.WriteLine("EditService.UpdateService - Update completed successfully");
            
            // Chèn delay nhỏ để đảm bảo dữ liệu đã được cập nhật trong DB
            await Task.Delay(300);

            // Kiểm tra lại dịch vụ vừa cập nhật để đảm bảo nó vẫn tồn tại
            var updatedService = ServiceRepository.GetOne(serviceToUpdate.Id);
            if (updatedService != null)
            {
                Console.WriteLine($"EditService.UpdateService - Verified service still exists with name: {updatedService.ServiceName}");
            }
            else
            {
                Console.WriteLine($"EditService.UpdateService - WARNING: Could not verify service after update!");
            }
            
            // Chuyển hướng với refresh để đảm bảo dữ liệu mới nhất
            Console.WriteLine("EditService.UpdateService - Navigating back to service list");
            NavigationManager.NavigateTo("/staff/services", true); // forceLoad = true để refresh trang
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EditService.UpdateService - ERROR: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"EditService.UpdateService - Inner Exception: {ex.InnerException.Message}");
            }
            
            errorMessage = $"Error updating service: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" - Inner Exception: {ex.InnerException.Message}";
            }
        }
        Console.WriteLine("EditService.UpdateService - Completed");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/staff/services");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/staff/services");
    }
} 