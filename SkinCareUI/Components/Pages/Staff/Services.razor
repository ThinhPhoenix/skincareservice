@page "/staff/services"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject IServiceRepository ServiceRepository
@inject IServiceCategoryRepository CategoryRepository
@inject NavigationManager NavigationManager

<h3 class="text-2xl font-semibold text-center mb-6">Skin Care Services</h3>

@if (errorMessage != null)
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative text-center">
        @errorMessage
    </div>
}

@if (serviceList == null)
{
    <div class="text-center text-gray-500">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="flex justify-between items-center mb-6">
        <button class="bg-primary text-white px-4 py-2 rounded-md shadow-md hover:bg-primary/80 transition" @onclick="AddNewService">
            + Add New Service
        </button>
    </div>

    <div class="overflow-hidden rounded-lg border border-gray-200 shadow-sm">
        <table class="w-full border-collapse bg-white text-sm">
            <thead class="bg-gray-100 text-gray-700 uppercase">
                <tr>
                    <th class="px-4 py-2 text-left">Service Name</th>
                    <th class="px-4 py-2 text-left">Category</th>
                    <th class="px-4 py-2 text-left">Description</th>
                    <th class="px-4 py-2 text-right">Price</th>
                    <th class="px-4 py-2 text-center">Duration</th>
                    <th class="px-4 py-2 text-center">Status</th>
                    <th class="px-4 py-2 text-center">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y">
                @foreach (var service in serviceList)
                {
                    <tr class="hover:bg-gray-50">
                        <td class="px-4 py-3">@service.ServiceName</td>
                        <td class="px-4 py-3">@(service.ServiceCategory?.CategoryName ?? "N/A")</td>
                        <td class="px-4 py-3">@(string.IsNullOrEmpty(service.Description) ? "N/A" : service.Description)</td>
                        <td class="px-4 py-3 text-right">$@service.Price.ToString("F2")</td>
                        <td class="px-4 py-3 text-center">@service.DurationMinutes min</td>
                        <td class="px-4 py-3 text-center">
                            <span class="px-2 py-1 text-xs font-semibold rounded-md @(service.IsActive ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700")">
                                @(service.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td class="px-4 py-3 text-center">
                            <div class="flex justify-center space-x-2">
                                <button class="bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600 transition" @onclick="() => EditService(service.Id)">Edit</button>
                                <button class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600 transition" @onclick="() => DeleteService(service.Id)">Delete</button>
                                <button class="bg-gray-500 text-white px-3 py-1 rounded-md hover:bg-gray-600 transition" @onclick="() => ViewServiceDetails(service.Id)">View</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Service> serviceList;
    private string errorMessage;

    protected override void OnInitialized()
    {
        try
        {
            serviceList = ServiceRepository.GetAll();

            foreach (var service in serviceList)
            {
                if (service.CategoryId != null && service.ServiceCategory == null)
                {
                    service.ServiceCategory = CategoryRepository.GetOne(service.CategoryId);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading services: {ex.Message}";
        }
    }

    private void DeleteService(string id)
    {
        try
        {
            ServiceRepository.Delete(id);
            serviceList.RemoveAll(s => s.Id == id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting service: {ex.Message}";
        }
    }

    private void AddNewService()
    {
        NavigationManager.NavigateTo("staff/services/add");
    }

    private void EditService(string id)
    {
        NavigationManager.NavigateTo("staff/services/edit/" + id);
    }

    private void ViewServiceDetails(string id)
    {
        NavigationManager.NavigateTo("staff/services/details/" + id);
    }
}