@page "/staff/services/edit/{Id}"
@using SkinCareBussinessObject
@using SkinCareRepository
@inject IServiceRepository ServiceRepository
@inject IServiceCategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="bg-gradient-to-b from-pink-100 to-white min-h-screen pt-8 pb-16">
    <div class="max-w-4xl mx-auto px-4">
        <h3 class="text-3xl font-bold text-center text-pink-700 mb-8 drop-shadow-sm">Chỉnh Sửa Dịch Vụ</h3>

        @if (errorMessage != null)
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-md mb-6 animate-fade-in">
                <div class="flex items-center">
                    <svg class="h-6 w-6 text-red-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    <span>@errorMessage</span>
                </div>
            </div>
        }

        @if (isLoading)
        {
            <div class="bg-white rounded-xl shadow-md p-8 text-center">
                <div class="animate-pulse flex flex-col items-center">
                    <div class="rounded-full bg-pink-200 h-12 w-12 flex items-center justify-center mb-4">
                        <svg class="animate-spin h-6 w-6 text-pink-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </div>
                    <p class="text-gray-600 font-medium">Đang tải dữ liệu...</p>
                </div>
            </div>
        }
        else if (service == null)
        {
            <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-lg shadow-md mb-6">
                <div class="flex items-center">
                    <svg class="h-6 w-6 text-yellow-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    <span class="text-yellow-700">Không tìm thấy dịch vụ với ID: @Id</span>
                </div>
            </div>
            <div class="flex justify-center mt-4">
                <button class="px-6 py-2.5 rounded-lg border border-gray-300 text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-400 shadow-sm transition-all duration-200 ease-in-out font-medium" @onclick="GoBack">
                    <span class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                        Quay lại danh sách
                    </span>
                </button>
            </div>
        }
        else
        {
            <div class="bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
                <div class="bg-gradient-to-r from-pink-500 to-pink-600 py-4 px-6">
                    <h4 class="text-white text-xl font-medium">Thông Tin Dịch Vụ</h4>
                </div>
                
                <div class="p-8 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Tên Dịch Vụ<span class="text-red-500">*</span></label>
                            <input type="text" class="block w-full rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 transition-all duration-200 ease-in-out" 
                                  placeholder="Nhập tên dịch vụ" @bind="service.ServiceName" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Danh Mục<span class="text-red-500">*</span></label>
                            <div class="relative">
                                <select class="block w-full rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 appearance-none transition-all duration-200 ease-in-out" 
                                        @bind="service.CategoryId">
                                    <option value="">-- Chọn danh mục --</option>
                                    @foreach (var category in categoryList)
                                    {
                                        <option value="@category.Id">@category.CategoryName</option>
                                    }
                                </select>
                                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                    </svg>
                                </div>
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Trạng Thái</label>
                            <div class="flex items-center h-full pt-2">
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" @bind="service.IsActive">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-pink-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-pink-500"></div>
                                    <span class="ml-3 text-sm font-medium text-gray-700">
                                        @(service.IsActive ? "Kích hoạt" : "Vô hiệu hóa")
                                    </span>
                                </label>
                            </div>
                        </div>

                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Mô Tả</label>
                            <textarea class="block w-full rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 resize-none h-24 transition-all duration-200 ease-in-out" 
                                     placeholder="Nhập mô tả dịch vụ" @bind="service.Description"></textarea>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Giá (VNĐ)<span class="text-red-500">*</span></label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500">₫</span>
                                </div>
                                <input type="number" step="1000" min="0" 
                                      class="block w-full pl-8 rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 transition-all duration-200 ease-in-out" 
                                      placeholder="0" @bind="service.Price" />
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Thời Gian (phút)<span class="text-red-500">*</span></label>
                            <div class="relative">
                                <input type="number" min="0" 
                                      class="block w-full rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 transition-all duration-200 ease-in-out" 
                                      placeholder="Thời gian thực hiện (phút)" @bind="service.DurationMinutes" />
                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500">phút</span>
                                </div>
                            </div>
                        </div>

                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Yêu Cầu Trước Khi Sử Dụng</label>
                            <textarea class="block w-full rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 resize-none h-20 transition-all duration-200 ease-in-out" 
                                     placeholder="Những điều khách hàng cần làm trước khi sử dụng dịch vụ" @bind="service.Prerequisites"></textarea>
                        </div>

                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Hướng Dẫn Chăm Sóc Sau</label>
                            <textarea class="block w-full rounded-lg border-gray-300 shadow-sm focus:ring-pink-500 focus:border-pink-500 px-4 py-3 resize-none h-20 transition-all duration-200 ease-in-out" 
                                     placeholder="Những điều khách hàng cần làm sau khi sử dụng dịch vụ" @bind="service.Aftercare"></textarea>
                        </div>
                    </div>

                    <div class="pt-4 border-t border-gray-200 mt-8">
                        <div class="flex justify-end space-x-3">
                            <button class="px-6 py-2.5 rounded-lg border border-gray-300 text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-400 shadow-sm transition-all duration-200 ease-in-out font-medium" 
                                    @onclick="Cancel">
                                Hủy Bỏ
                            </button>
                            <button class="px-6 py-2.5 rounded-lg bg-gradient-to-r from-pink-500 to-pink-600 text-white hover:from-pink-600 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-offset-2 shadow-md transition-all duration-200 ease-in-out font-medium" 
                                    @onclick="ShowUpdateConfirm">
                                <span class="flex items-center">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    Lưu Thay Đổi
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (showConfirmDialog)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in">
        <div class="bg-white rounded-xl p-6 max-w-md w-full shadow-2xl transform transition-all">
            <div class="text-center mb-4">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-pink-100 mb-4">
                    <svg class="h-6 w-6 text-pink-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900">Cập nhật dịch vụ</h3>
                <p class="text-gray-600 mt-2">Bạn có chắc chắn muốn cập nhật thông tin dịch vụ này?</p>
            </div>
            <div class="flex justify-center space-x-4 mt-6">
                <button class="px-5 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-all duration-200 font-medium"
                        @onclick="CloseConfirmDialog">
                    Hủy bỏ
                </button>
                <button class="px-5 py-2 bg-gradient-to-r from-pink-500 to-pink-600 text-white rounded-lg hover:from-pink-600 hover:to-pink-700 transition-all duration-200 font-medium"
                        @onclick="UpdateService">
                    Xác nhận
                </button>
            </div>
        </div>
    </div>
}

<style>
    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    [Parameter]
    public string Id { get; set; }

    private Service service;
    private List<ServiceCategory> categoryList;
    private string errorMessage;
    private bool isLoading = true;
    private bool showConfirmDialog = false;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        try
        {
            Console.WriteLine($"EditService.LoadData - Bắt đầu tải dữ liệu cho ID: {Id}");
            
            // Tải danh sách danh mục
            categoryList = CategoryRepository.GetAll();
            Console.WriteLine($"EditService.LoadData - Đã tải {categoryList?.Count ?? 0} danh mục");

            // Tải thông tin dịch vụ
            if (!string.IsNullOrEmpty(Id))
            {
                service = ServiceRepository.GetOne(Id);
                Console.WriteLine($"EditService.LoadData - Dịch vụ đã tải: {(service != null ? "Có" : "Không")}");
                
                if (service != null)
                {
                    Console.WriteLine($"EditService.LoadData - Dữ liệu dịch vụ: Tên={service.ServiceName}, Giá={service.Price}, CategoryId={service.CategoryId}");
                    
                    // Nếu dịch vụ được tìm thấy nhưng danh mục chưa được tải
                    if (service.CategoryId != null && service.ServiceCategory == null)
                    {
                        var category = CategoryRepository.GetOne(service.CategoryId);
                        service.ServiceCategory = category;
                        Console.WriteLine($"EditService.LoadData - Danh mục đã tải: {(category != null ? category.CategoryName : "Không tìm thấy")}");
                    }
                }
                else
                {
                    Console.WriteLine($"EditService.LoadData - CẢNH BÁO: Không tìm thấy dịch vụ với ID {Id}");
                }
            }
            else
            {
                Console.WriteLine($"EditService.LoadData - CẢNH BÁO: Không có ID được cung cấp");
            }
            
            isLoading = false;
            Console.WriteLine("EditService.LoadData - Hoàn thành");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EditService.LoadData - LỖI: {ex.Message}");
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            isLoading = false;
        }
    }

    private void ShowUpdateConfirm()
    {
        // Kiểm tra đầu vào trước
        if (string.IsNullOrWhiteSpace(service.ServiceName))
        {
            errorMessage = "Tên dịch vụ không được để trống";
            return;
        }

        if (string.IsNullOrWhiteSpace(service.CategoryId))
        {
            errorMessage = "Vui lòng chọn danh mục";
            return;
        }

        if (service.Price <= 0)
        {
            errorMessage = "Giá dịch vụ phải lớn hơn 0";
            return;
        }

        if (service.DurationMinutes <= 0)
        {
            errorMessage = "Thời gian dịch vụ phải lớn hơn 0 phút";
            return;
        }

        // Hiển thị hộp thoại xác nhận
        showConfirmDialog = true;
    }

    private void CloseConfirmDialog()
    {
        showConfirmDialog = false;
    }

    private async Task UpdateService()
    {
        Console.WriteLine("EditService.UpdateService - Bắt đầu quá trình cập nhật");
        try
        {
            // Đóng hộp thoại xác nhận
            showConfirmDialog = false;

            // Tạo bản sao của service để tránh vấn đề tham chiếu
            Service serviceToUpdate = new Service
            {
                Id = service.Id,
                ServiceName = service.ServiceName.Trim(),
                Description = service.Description?.Trim() ?? string.Empty,
                CategoryId = service.CategoryId.Trim(),
                Price = service.Price,
                DurationMinutes = service.DurationMinutes,
                IsActive = service.IsActive,
                Prerequisites = service.Prerequisites?.Trim() ?? string.Empty,
                Aftercare = service.Aftercare?.Trim() ?? string.Empty,
                ServiceCategory = null // Luôn đặt ServiceCategory là null
            };
            
            // In ra dữ liệu sẽ được cập nhật
            Console.WriteLine($"EditService.UpdateService - Dữ liệu cập nhật: ID={serviceToUpdate.Id}, Tên={serviceToUpdate.ServiceName}, Giá={serviceToUpdate.Price}, Danh mục={serviceToUpdate.CategoryId}");
            
            // Cập nhật
            Console.WriteLine("EditService.UpdateService - Gọi repository cập nhật");
            ServiceRepository.Update(serviceToUpdate);
            Console.WriteLine("EditService.UpdateService - Cập nhật hoàn tất thành công");
            
            // Chèn delay nhỏ để đảm bảo dữ liệu đã được cập nhật trong DB
            await Task.Delay(300);

            // Kiểm tra lại dịch vụ vừa cập nhật để đảm bảo nó vẫn tồn tại
            var updatedService = ServiceRepository.GetOne(serviceToUpdate.Id);
            if (updatedService != null)
            {
                Console.WriteLine($"EditService.UpdateService - Xác nhận dịch vụ vẫn tồn tại với tên: {updatedService.ServiceName}");
            }
            else
            {
                Console.WriteLine($"EditService.UpdateService - CẢNH BÁO: Không thể xác minh dịch vụ sau khi cập nhật!");
            }
            
            // Chuyển hướng với refresh để đảm bảo dữ liệu mới nhất
            Console.WriteLine("EditService.UpdateService - Chuyển hướng về danh sách dịch vụ");
            NavigationManager.NavigateTo("/staff/services", true); // forceLoad = true để refresh trang
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EditService.UpdateService - LỖI: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"EditService.UpdateService - Ngoại lệ bên trong: {ex.InnerException.Message}");
            }
            
            errorMessage = $"Lỗi khi cập nhật dịch vụ: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" - Chi tiết: {ex.InnerException.Message}";
            }
        }
        Console.WriteLine("EditService.UpdateService - Đã hoàn thành");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/staff/services");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/staff/services");
    }
} 