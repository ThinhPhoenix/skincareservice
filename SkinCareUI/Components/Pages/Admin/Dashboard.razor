@page "/admin/dashboard"
@using SkinCareRepository
@using SkinCareBussinessObject
@using System.Linq
@inject IAppointmentRepository AppointmentRepository
@inject IPaymentRepository PaymentRepository
@inject ICustomerRepository CustomerRepository
@inject IJSRuntime JSRuntime

<PageTitle>Bảng Điều Khiển Quản Trị</PageTitle>

<div class="dashboard-container min-h-screen overflow-hidden">
    <div class="container mx-auto px-4 py-8">
        <div class="d-flex justify-content-between align-items-center mb-8">
            <h3 class="text-3xl font-bold text-gray-800 animate-fadeIn">Bảng Điều Khiển</h3>
            <div class="d-flex align-items-center animate-fadeIn" style="animation-delay: 300ms;">
                <div class="input-group me-2" style="width: 150px;">
                    <input type="number" class="form-control rounded-lg border-gray-300 focus:border-pink-500 focus:ring focus:ring-pink-200" @bind="selectedYear" min="2000" max="2100" />
                </div>
                <button class="btn bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-full px-6 py-2 font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300" @onclick="LoadDataForYear">Tải Dữ Liệu</button>
            </div>
        </div>

        <div class="row mb-6 scroll-reveal">
            <div class="col-md-4 mb-4">
                <div id="customerSummaryCard" class="card rounded-xl overflow-hidden shadow-sm hover:shadow-ml transition-all duration-300 transform hover:-translate-y-1 border-0">
                    <div class="card-body bg-white p-6">
                        <h5 class="card-title text-xl font-bold text-gray-800 mb-2">Tổng Số Khách Hàng</h5>
                        <h1 class="text-4xl font-bold text-pink-600">@totalCustomers</h1>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div id="appointmentSummaryCard" class="card rounded-xl overflow-hidden shadow-sm hover:shadow-ml transition-all duration-300 transform hover:-translate-y-1 border-0">
                    <div class="card-body bg-white p-6">
                        <h5 class="card-title text-xl font-bold text-gray-800 mb-2">Tổng Số Cuộc Hẹn</h5>
                        <h1 class="text-4xl font-bold text-purple-600">@totalAppointments</h1>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div id="revenueSummaryCard" class="card rounded-xl overflow-hidden shadow-sm hover:shadow-ml transition-all duration-300 transform hover:-translate-y-1 border-0">
                    <div class="card-body bg-white p-6">
                        <h5 class="card-title text-xl font-bold text-gray-800 mb-2">Tổng Doanh Thu</h5>
                        <h1 class="text-4xl font-bold text-green-600">@totalRevenue.ToString("#,##0") VNĐ</h1>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-6">
            <div class="col-md-6 mb-4 scroll-reveal" style="animation-delay: 200ms;">
                <div class="card rounded-xl overflow-hidden shadow-sm hover:shadow-ml transition-all duration-300 border-0">
                    <div class="card-body bg-white p-6">
                        <h5 class="card-title text-xl font-bold text-gray-800 mb-4">Khách Hàng Theo Tháng (@selectedYear)</h5>
                        <div class="chart-container" style="position: relative; height:300px;">
                            <canvas id="customersChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-4 scroll-reveal" style="animation-delay: 400ms;">
                <div class="card rounded-xl overflow-hidden shadow-sm hover:shadow-ml transition-all duration-300 border-0">
                    <div class="card-body bg-white p-6">
                        <h5 class="card-title text-xl font-bold text-gray-800 mb-4">Cuộc Hẹn Theo Tháng (@selectedYear)</h5>
                        <div class="chart-container" style="position: relative; height:300px;">
                            <canvas id="appointmentsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12 scroll-reveal" style="animation-delay: 600ms;">
                <div class="card rounded-xl overflow-hidden shadow-sm hover:shadow-ml transition-all duration-300 border-0">
                    <div class="card-body bg-white p-6">
                        <h5 class="card-title text-xl font-bold text-gray-800 mb-4">Doanh Thu Theo Tháng (@selectedYear)</h5>
                        <div class="chart-container" style="position: relative; height:300px;">
                            <canvas id="revenueChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int[] monthlyCustomers = new int[12];
    private int[] monthlyAppointments = new int[12];
    private decimal[] monthlyRevenue = new decimal[12];
    private int totalCustomers;
    private int totalAppointments;
    private decimal totalRevenue;
    private int selectedYear = DateTime.Now.Year;
    private string[] months = { "Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12" };
    private bool dataLoaded = false;
    private bool chartsInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Chỉ tải dữ liệu, không tương tác với JavaScript
        await FetchDataForYear();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (dataLoaded)
        {
            // Xóa biểu đồ hiện có nếu chúng tồn tại (chỉ khi không phải lần hiển thị đầu tiên)
            if (!firstRender && chartsInitialized)
            {
                await JSRuntime.InvokeVoidAsync("clearCharts");
            }

            // Khởi tạo biểu đồ với dữ liệu đã tải
            await InitializeChartsAsync();
            dataLoaded = false;
            chartsInitialized = true;
        }

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initScrollReveal");
        }
    }

    private async Task LoadDataForYear()
    {
        // Chỉ tải dữ liệu, chưa tương tác với JavaScript
        await FetchDataForYear();
        
        // Kích hoạt hiển thị lại, sau đó OnAfterRenderAsync sẽ được gọi
        StateHasChanged();
    }

    private async Task FetchDataForYear()
    {
        // Lấy dữ liệu cho năm đã chọn
        monthlyCustomers = CustomerRepository.GetDashBoardCustomer(selectedYear);
        monthlyAppointments = AppointmentRepository.GetDashBoardAppointment(selectedYear);
        monthlyRevenue = PaymentRepository.GetDashBoardRevenue(selectedYear);

        // Tính tổng
        totalCustomers = monthlyCustomers.Sum();
        totalAppointments = monthlyAppointments.Sum();
        totalRevenue = monthlyRevenue.Sum();

        // Đánh dấu dữ liệu đã được tải để biểu đồ có thể được khởi tạo trong OnAfterRenderAsync
        dataLoaded = true;
    }

    private async Task InitializeChartsAsync()
    {
        await JSRuntime.InvokeVoidAsync("initializeCharts", 
            months, 
            monthlyCustomers,
            monthlyAppointments,
            monthlyRevenue);
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://unpkg.com/scrollreveal"></script>
<script>
    let customerChart = null;
    let appointmentChart = null;
    let revenueChart = null;

    // Màu sắc cho các biểu đồ
    const chartColors = {
        customers: 'rgb(219, 39, 119)',    // pink-600
        appointments: 'rgb(124, 58, 237)',  // purple-600 
        revenue: 'rgb(16, 185, 129)'        // green-600
    };

    // Thêm hiệu ứng hover cho các card
    document.addEventListener('DOMContentLoaded', function() {
        // Hiệu ứng cho các card tổng số
        const customerSummaryCard = document.getElementById('customerSummaryCard');
        const appointmentSummaryCard = document.getElementById('appointmentSummaryCard');
        const revenueSummaryCard = document.getElementById('revenueSummaryCard');
        
        if (customerSummaryCard) {
            customerSummaryCard.addEventListener('mouseenter', function() {
                this.style.border = `1px solid ${chartColors.customers}`;
            });
            customerSummaryCard.addEventListener('mouseleave', function() {
                this.style.border = 'none';
            });
        }
        
        if (appointmentSummaryCard) {
            appointmentSummaryCard.addEventListener('mouseenter', function() {
                this.style.border = `1px solid ${chartColors.appointments}`;
            });
            appointmentSummaryCard.addEventListener('mouseleave', function() {
                this.style.border = 'none';
            });
        }
        
        if (revenueSummaryCard) {
            revenueSummaryCard.addEventListener('mouseenter', function() {
                this.style.border = `1px solid ${chartColors.revenue}`;
            });
            revenueSummaryCard.addEventListener('mouseleave', function() {
                this.style.border = 'none';
            });
        }

        // Hiệu ứng cho các card biểu đồ (giữ nguyên code hiện tại)
        // Card Khách Hàng
        const customerCard = document.querySelector('#customersChart').closest('.card');
        customerCard.addEventListener('mouseenter', function() {
            document.querySelector('#customersChart').style.border = `1px solid ${chartColors.customers}`;
        });
        customerCard.addEventListener('mouseleave', function() {
            document.querySelector('#customersChart').style.border = 'none';
        });

        // Card Cuộc Hẹn
        const appointmentCard = document.querySelector('#appointmentsChart').closest('.card');
        appointmentCard.addEventListener('mouseenter', function() {
            document.querySelector('#appointmentsChart').style.border = `1px solid ${chartColors.appointments}`;
        });
        appointmentCard.addEventListener('mouseleave', function() {
            document.querySelector('#appointmentsChart').style.border = 'none';
        });

        // Card Doanh Thu
        const revenueCard = document.querySelector('#revenueChart').closest('.card');
        revenueCard.addEventListener('mouseenter', function() {
            document.querySelector('#revenueChart').style.border = `1px solid ${chartColors.revenue}`;
        });
        revenueCard.addEventListener('mouseleave', function() {
            document.querySelector('#revenueChart').style.border = 'none';
        });
    });

    window.initScrollReveal = function() {
        const sr = ScrollReveal({
            origin: 'bottom',
            distance: '30px',
            duration: 1000,
            reset: false,
            delay: 200
        });

        sr.reveal('.scroll-reveal', { 
            interval: 100
        });
    };

    window.clearCharts = () => {
        if (customerChart) customerChart.destroy();
        if (appointmentChart) appointmentChart.destroy();
        if (revenueChart) revenueChart.destroy();
    };

    window.initializeCharts = (months, customerData, appointmentData, revenueData) => {
        const chartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0,
                        font: {
                            family: "'Poppins', sans-serif",
                            size: 12
                        }
                    },
                    grid: {
                        color: 'rgba(0, 0, 0, 0.05)',
                        drawBorder: false
                    }
                },
                x: {
                    ticks: {
                        font: {
                            family: "'Poppins', sans-serif",
                            size: 12
                        }
                    },
                    grid: {
                        display: false
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            family: "'Poppins', sans-serif",
                            size: 13
                        }
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(255, 255, 255, 0.9)',
                    titleColor: '#333',
                    titleFont: {
                        family: "'Poppins', sans-serif",
                        size: 14,
                        weight: 'bold'
                    },
                    bodyColor: '#666',
                    bodyFont: {
                        family: "'Poppins', sans-serif",
                        size: 13
                    },
                    borderColor: 'rgba(0, 0, 0, 0.1)',
                    borderWidth: 1,
                    cornerRadius: 8,
                    padding: 10,
                    displayColors: false
                }
            }
        };

        // Biểu đồ Khách Hàng
        const customersCtx = document.getElementById('customersChart');
        customerChart = new Chart(customersCtx, {
            type: 'line',
            data: {
                labels: months,
                datasets: [{
                    label: 'Khách Hàng Mới',
                    data: customerData,
                    borderColor: chartColors.customers,
                    backgroundColor: 'rgba(219, 39, 119, 0.1)',
                    tension: 0.4,
                    borderWidth: 3,
                    pointBackgroundColor: 'rgb(219, 39, 119)',
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    fill: true
                }]
            },
            options: {
                ...chartOptions,
                scales: {
                    ...chartOptions.scales,
                    y: {
                        ...chartOptions.scales.y,
                        ticks: {
                            ...chartOptions.scales.y.ticks,
                            precision: 0
                        }
                    }
                }
            }
        });

        // Biểu đồ Cuộc Hẹn
        const appointmentsCtx = document.getElementById('appointmentsChart');
        appointmentChart = new Chart(appointmentsCtx, {
            type: 'line',
            data: {
                labels: months,
                datasets: [{
                    label: 'Cuộc Hẹn',
                    data: appointmentData,
                    borderColor: chartColors.appointments,
                    backgroundColor: 'rgba(124, 58, 237, 0.1)',
                    tension: 0.4,
                    borderWidth: 3,
                    pointBackgroundColor: 'rgb(124, 58, 237)',
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    fill: true
                }]
            },
            options: {
                ...chartOptions,
                scales: {
                    ...chartOptions.scales,
                    y: {
                        ...chartOptions.scales.y,
                        ticks: {
                            ...chartOptions.scales.y.ticks,
                            precision: 0
                        }
                    }
                }
            }
        });

        // Biểu đồ Doanh Thu
        const revenueCtx = document.getElementById('revenueChart');
        revenueChart = new Chart(revenueCtx, {
            type: 'line',
            data: {
                labels: months,
                datasets: [{
                    label: 'Doanh Thu (VNĐ)',
                    data: revenueData,
                    borderColor: chartColors.revenue,
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    tension: 0.4,
                    borderWidth: 3,
                    pointBackgroundColor: 'rgb(16, 185, 129)',
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    fill: true
                }]
            },
            options: chartOptions
        });

        // Khởi tạo lại hiệu ứng hover sau khi biểu đồ được tạo
        setTimeout(() => {
            const customerCard = document.querySelector('#customersChart').closest('.card');
            const appointmentCard = document.querySelector('#appointmentsChart').closest('.card');
            const revenueCard = document.querySelector('#revenueChart').closest('.card');
            
            customerCard.addEventListener('mouseenter', function() {
                document.querySelector('#customersChart').style.border = `1px solid ${chartColors.customers}`;
            });
            customerCard.addEventListener('mouseleave', function() {
                document.querySelector('#customersChart').style.border = 'none';
            });
            
            appointmentCard.addEventListener('mouseenter', function() {
                document.querySelector('#appointmentsChart').style.border = `1px solid ${chartColors.appointments}`;
            });
            appointmentCard.addEventListener('mouseleave', function() {
                document.querySelector('#appointmentsChart').style.border = 'none';
            });
            
            revenueCard.addEventListener('mouseenter', function() {
                document.querySelector('#revenueChart').style.border = `1px solid ${chartColors.revenue}`;
            });
            revenueCard.addEventListener('mouseleave', function() {
                document.querySelector('#revenueChart').style.border = 'none';
            });
        }, 500);
    };
</script>

<style>
    .animate-fadeIn {
        animation: fadeIn 1.5s ease-out forwards;
    }

    @@keyframes fadeIn {
        0% { opacity: 0; transform: translateY(20px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    .card {
        transition: all 0.3s ease;
        border: none;
    }

    .chart-container {
        transition: all 0.3s ease;
    }

    .btn {
        transition: all 0.3s ease;
    }

    /* Tailwind-equivalent classes */
    .bg-gradient-to-r {
        background-image: linear-gradient(to right, var(--tw-gradient-stops));
    }

    .from-pink-500 {
        --tw-gradient-from: #ec4899;
        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(236, 72, 153, 0));
    }

    .to-purple-600 {
        --tw-gradient-to: #9333ea;
    }

    .rounded-xl {
        border-radius: 0.75rem;
    }

    .rounded-full {
        border-radius: 9999px;
    }

    .shadow-lg {
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .hover\:shadow-xl:hover {
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .transform {
        transform: translateZ(0);
    }

    .hover\:-translate-y-1:hover {
        transform: translateY(-0.25rem);
    }

    .transition-all {
        transition-property: all;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 300ms;
    }

    .duration-300 {
        transition-duration: 300ms;
    }

    .text-pink-600 {
        color: #db2777;
    }

    .text-purple-600 {
        color: #7c3aed;
    }

    .text-green-600 {
        color: #10b981;
    }

    .min-h-screen {
        min-height: 100vh;
    }

    .container {
        width: 100%;
    }

    .mx-auto {
        margin-left: auto;
        margin-right: auto;
    }

    .mb-8 {
        margin-bottom: 2rem;
    }

    .mb-6 {
        margin-bottom: 1.5rem;
    }

    .mb-4 {
        margin-bottom: 1rem;
    }

    .mb-2 {
        margin-bottom: 0.5rem;
    }

    .p-6 {
        padding: 1.5rem;
    }

    .px-6 {
        padding-left: 1.5rem;
        padding-right: 1.5rem;
    }

    .py-2 {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
    }

    .text-3xl {
        font-size: 1.875rem;
        line-height: 2.25rem;
    }

    .text-4xl {
        font-size: 2.25rem;
        line-height: 2.5rem;
    }

    .text-xl {
        font-size: 1.25rem;
        line-height: 1.75rem;
    }

    .font-bold {
        font-weight: 700;
    }

    .font-semibold {
        font-weight: 600;
    }

    .text-white {
        color: #ffffff;
    }

    .text-gray-800 {
        color: #1f2937;
    }

    .border-0 {
        border-width: 0px;
    }

    .overflow-hidden {
        overflow: hidden;
    }

    canvas {
        transition: border 0.3s ease;
        border-radius: 8px;
    }
</style>