@page "/admin/payments"
@using SkinCareBussinessObject
@using SkinCareRepository
@using Microsoft.JSInterop
@inject IPaymentRepository PaymentRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Payment Management</PageTitle>

<div class="container-fluid mt-4">
    <div class="card shadow" style="background-color: #fdf2f8;">
        <div class="card-header text-white" style="background-color: #db2777;">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="m-0"><i class="bi bi-cash-stack me-2"></i>Payment Management</h1>
                <button class="btn btn-light btn-lg" @onclick="@(() => NavigationManager.NavigateTo("/admin/payments/add"))">
                    <i class="bi bi-plus-circle me-1"></i> Create New Payment
                </button>
            </div>
        </div>

        <div class="card-body">
            <!-- Search bar -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" placeholder="Search payments..."
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterPayments" />
                    </div>
                </div>
            </div>

            @if (filteredPayments != null && filteredPayments.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0 fs-5">
                        <thead style="background-color: #fdf2f8;">
                            <tr>
                                <th>ID</th>
                                <th>Appointment ID</th>
                                <th>Amount</th>
                                <th>Payment Date & Time</th>
                                <th>Payment Method</th>
                                <th>Payment Status</th>
                                <th>Transaction Reference</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in filteredPayments)
                            {
                                <tr>
                                    <td>@payment.Id</td>
                                    <td>@payment.AppointmentId</td>
                                    <td>@payment.Amount</td>
                                    <td>@FormatDateInVietnamese(payment.PaymentDateTime)</td>
                                    <td>@payment.PaymentMethod</td>
                                    <td>@payment.PaymentStatus</td>
                                    <td>@payment.TransactionReference</td>
                                    <td class="text-center">
                                        <div class="d-flex justify-content-center gap-2">
                                            <a href="@($"/admin/payments/details/{payment.Id}")" class="btn btn-info">
                                                <i class="bi bi-eye me-1"></i> Details
                                            </a>
                                            <a href="@($"/admin/payments/edit/{payment.Id}")" class="btn" style="background-color: #db2777; color: white;">
                                                <i class="bi bi-pencil me-1"></i> Edit
                                            </a>
                                            <button class="btn btn-danger" @onclick="() => DeletePayment(payment.Id)">
                                                <i class="bi bi-trash me-1"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else if (filteredPayments != null && !filteredPayments.Any() && searchTerm != "")
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-search text-secondary" style="font-size: 5rem;"></i>
                    </div>
                    <h2 class="text-secondary">No Results Found</h2>
                    <p class="text-muted mb-4 fs-5">Please try again with a different search term.</p>
                </div>
            }
            else if (payments != null && !payments.Any())
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-calendar-x text-secondary" style="font-size: 5rem;"></i>
                    </div>
                    <h2 class="text-secondary">No Payments Yet</h2>
                    <p class="text-muted mb-4 fs-5">Start by creating your first payment.</p>
                    <button class="btn text-white btn-lg" @onclick="@(() => NavigationManager.NavigateTo("/admin/payments/create"))" style="background-color: #db2777;">
                        <i class="bi bi-plus-circle me-1"></i> Create First Payment
                    </button>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center py-5">
                    <div class="spinner-border" role="status" style="color: #db2777; width: 4rem; height: 4rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Payment>? payments;
    private List<Payment>? filteredPayments;
    private string searchTerm = "";

    protected override void OnInitialized()
    {
        LoadPayments();
    }

    private void LoadPayments()
    {
        payments = PaymentRepository.GetAll();
        FilterPayments();
    }

    private void FilterPayments()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPayments = payments;
        }
        else
        {
            filteredPayments = payments?
                .Where(p =>
                    p.Id.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.AppointmentId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.PaymentMethod.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.PaymentStatus.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (p.TransactionReference?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                )
                .ToList();
        }
    }


    private string GetMonthNameInVietnamese(int month)
    {
        return month switch
        {
            1 => "Tháng 1",
            2 => "Tháng 2",
            3 => "Tháng 3",
            4 => "Tháng 4",
            5 => "Tháng 5",
            6 => "Tháng 6",
            7 => "Tháng 7",
            8 => "Tháng 8",
            9 => "Tháng 9",
            10 => "Tháng 10",
            11 => "Tháng 11",
            12 => "Tháng 12",
            _ => $"Tháng {month}"
        };
    }

    // Helper method for Vietnamese date format with time from separate DateTime
    // Add this method to include time formatting with a single DateTime parameter
    // Helper method for Vietnamese date format with time from DateTime, manually adjusted to GMT+7
private string FormatDateInVietnamese(DateTime dateTime)
{
    // Ensure the datetime is in UTC if coming from database
    if (dateTime.Kind != DateTimeKind.Utc)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);
    }
    
    // Add 7 hours to convert from UTC to GMT+7 (Vietnam timezone)
    DateTime vietnamDateTime = dateTime.AddHours(7);
    
    // Format the Vietnam datetime
    string[] weekdays = { "Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy" };
    string formattedDate = $"{weekdays[(int)vietnamDateTime.DayOfWeek]}, ngày {vietnamDateTime.Day} {GetMonthNameInVietnamese(vietnamDateTime.Month)} {vietnamDateTime.Year}";
    
    // Include time formatting in GMT+7
    formattedDate += $", {vietnamDateTime.ToString("HH:mm")}";
    
    return formattedDate;
}
    private async Task DeletePayment(string id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this payment?"))
        {
            PaymentRepository.Delete(id);
            LoadPayments();
            StateHasChanged();
        }
    }
}